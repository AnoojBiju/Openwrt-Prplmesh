#############################################################################
# SPDX-License-Identifier: BSD-2-Clause-Patent
# SPDX-FileCopyrightText: 2016-2020 the prplMesh contributors (see AUTHORS.md)
# This code is subject to the terms of the BSD+Patent license.
# See LICENSE file for more details.
#############################################################################

#iface_type: ETHERNET, GW_BRIDGE, WAVE_512, WAVE_513, WAVE_514, WAVE_522, WAVE_523, WAVE_524, STA_8265, STA_8260

[global]
temp_path=@TMP_PATH@
vendor=Intel
model=prplMesh
ucc_listener_port=8002 # 0 - disabled
enable_arp_monitor=0
bridge_iface=@BEEROCKS_BRIDGE_IFACE@
enable_system_hang_test=0 # 0 - disabled
monitor_polling_rate_msec=@BEEROCKS_MONITOR_POLLING_RATE_MSEC@

# This variable is a workaround that turn on the profile_x_disallow flag when configuring the
# traffic separation, if the Controller sent unsupported configuration on the profile disallow
# flags.
# Disallow profile 1 is default, since all boardfarm tests and certification flows, sends
# both disallow bits set to 0.
# It is possible that the Controller will configure bBSS in a way we don't support,
# i.e a bBSS that allows connection of profile1 and profile2 Agents.
# When it happens during certification, we can't configure the bBSS correctly in terms of
# traffic separation.
# if m_profile_x_disallow_override_unsupported_configuration == 0 -> Do nothing, no effect.
# 
# if m_profile_x_disallow_override_unsupported_configuration == 1 -> 
#  The backhaul_bss_disallow_profile1_agent_association will be overriden to 'true', when the
#  profile disallow flags sent by the Controller is unsupported.
# 
# if m_profile_x_disallow_override_unsupported_configuration == 2 -> 
#  The backhaul_bss_disallow_profile2_agent_association will be overriden to 'true', when the
#  profile disallow flags sent by the Controller is unsupported.
# 
profile_x_disallow_override_unsupported_configuration=1

# on_boot_scan = 0 -> On Boot Scan disabled by default
# on_boot_scan = 1 -> On Boot Scan enabled on 5GHz
# on_boot_scan = 2 -> On Boot Scan enabled on 2.4GHz

on_boot_scan=0

[backhaul]
backhaul_preferred_bssid=

[agent0]
hostap_iface_type=WIFI_INTEL
hostap_ant_gain=0
enable_repeater_mode=@BEEROCKS_REPEATER_MODE@

[agent1]
hostap_iface_type=WIFI_INTEL
hostap_ant_gain=0
enable_repeater_mode=0

[agent2]
hostap_iface_type=WIFI_INTEL
hostap_ant_gain=0
enable_repeater_mode=0

[agent3]
hostap_iface_type=WIFI_INTEL
hostap_ant_gain=0
enable_repeater_mode=0

[log]
log_global_levels=error,info,warning,fatal,trace,debug
log_global_syslog_levels=error,info,warning,fatal,trace,debug
log_global_size=@BEEROCKS_AGENT_LOG_SIZE@
log_files_enabled=@BEEROCKS_LOG_FILES_ENABLED@
log_files_path=@BEEROCKS_LOG_FILES_PATH@
log_files_auto_roll=@BEEROCKS_LOG_FILES_AUTO_ROLL@
log_stdout_enabled=@BEEROCKS_LOG_STDOUT_ENABLED@
log_syslog_enabled=@BEEROCKS_LOG_SYSLOG_ENABLED@
