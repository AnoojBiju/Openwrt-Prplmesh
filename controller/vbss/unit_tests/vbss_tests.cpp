//
// Copyright (c) 2022 CableLabs for prplMesh All rights reserved.
//
#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "../vbss_core.h"

using ::testing::_;
using ::testing::DoAll;
using ::testing::InSequence;
using ::testing::InvokeWithoutArgs;
using ::testing::Matcher;
using ::testing::Return;
using ::testing::SaveArg;
using ::testing::StrEq;
using ::testing::StrictMock;

namespace {

const uint8_t g_base_bssid[ETH_ALEN] = {0x94, 0x83, 0xC4, 0x16, 0x83, 0xA1};
const uint8_t g_fixed_mask[ETH_ALEN] = {0x94, 0x83, 0, 0, 0, 0};
const uint8_t g_fixed_bits[ETH_ALEN] = {0x94, 0x83, 0, 0, 0, 0};
const uint8_t g_zero_mask[ETH_ALEN]  = {0, 0, 0, 0, 0, 0};
constexpr auto g_max_vbss_1          = 16;
constexpr auto g_max_vbss_2          = 8;

const vbss::vbss_id g_fixed_bits_list[] = {
    {0x94, 0x83, 0xc4, 0x16, 0x84, 0x01}, {0x94, 0x83, 0xC4, 0x16, 0x84, 0x02},
    {0x94, 0x83, 0xc4, 0x16, 0x84, 0x03}, {0x94, 0x83, 0xC4, 0x16, 0x84, 0x04},
    {0x94, 0x83, 0xc4, 0x16, 0x84, 0x05}, {0x94, 0x83, 0xC4, 0x16, 0x84, 0x06},
    {0x94, 0x83, 0xc4, 0x16, 0x84, 0x07}, {0x94, 0x83, 0xC4, 0x16, 0x84, 0x08},
    {0x94, 0x83, 0xc4, 0x16, 0x84, 0x09}, {0x94, 0x83, 0xC4, 0x16, 0x84, 0x0a},
    {0x94, 0x83, 0xc4, 0x16, 0x84, 0x0b}, {0x94, 0x83, 0xC4, 0x16, 0x84, 0x0c},
    {0x94, 0x83, 0xc4, 0x16, 0x84, 0x0d}, {0x94, 0x83, 0xC4, 0x16, 0x84, 0x0e},
    {0x94, 0x83, 0xc4, 0x16, 0x84, 0x0f}, {0x94, 0x83, 0xC4, 0x16, 0x84, 0x10}};

const vbss::vbss_id g_fixed_mask_list[] = {
    {0x94, 0x83, 0xc4, 0x16, 0x83, 0x02}, {0x94, 0x83, 0xC4, 0x16, 0x83, 0x04},
    {0x94, 0x83, 0xc4, 0x16, 0x83, 0x08}, {0x94, 0x83, 0xC4, 0x16, 0x83, 0x10},
    {0x94, 0x83, 0xc4, 0x16, 0x83, 0x40}, {0x94, 0x83, 0xC4, 0x16, 0x04, 0xA1},
    {0x94, 0x83, 0xc4, 0x16, 0x08, 0xA1}, {0x94, 0x83, 0xC4, 0x16, 0x10, 0xA1},
    {0x94, 0x83, 0xc4, 0x16, 0x20, 0xA1}, {0x94, 0x83, 0xC4, 0x16, 0x40, 0xA1},
    {0x94, 0x83, 0xc4, 0x01, 0x83, 0xA1}, {0x94, 0x83, 0xC4, 0x08, 0x83, 0xA1},
    {0x94, 0x83, 0xc4, 0x20, 0x83, 0xA1}, {0x94, 0x83, 0xC4, 0x40, 0x83, 0xA1},
    {0x94, 0x83, 0xc4, 0x80, 0x83, 0xA1}, {0x94, 0x83, 0x01, 0x16, 0x83, 0xA1}};

TEST(VbssCoreTest, Create_Set_Fixed)
{
    using vbss::VbssCore;

    VbssCore testCore = VbssCore();
    std::vector<vbss::vbss_id> sampleVector;
    ASSERT_TRUE(testCore.create_set_of_vbss_ids(g_base_bssid, g_zero_mask, g_fixed_bits,
                                                g_max_vbss_1, sampleVector));
    for (uint8_t i = 0; i < g_max_vbss_1; ++i) {
        ASSERT_EQ(sampleVector[i], g_fixed_bits_list[i]);
    }
}

TEST(VbssCoreTest, Create_Set_Mask)
{
    using vbss::VbssCore;

    VbssCore testCore = VbssCore();
    std::vector<vbss::vbss_id> sampleVector;
    ASSERT_TRUE(testCore.create_set_of_vbss_ids(g_base_bssid, g_fixed_mask, g_zero_mask,
                                                g_max_vbss_1, sampleVector));

    for (uint8_t i = 0; i < g_max_vbss_1; ++i) {
        ASSERT_EQ(sampleVector[i], g_fixed_mask_list[i]);
    }
}

TEST(VbssCoreTest, TestCompareEquation)
{
    using vbss::VbssCore;

    VbssCore testCore = VbssCore();
    ASSERT_TRUE(testCore.compare_incoming_to_curr(-60, -45));
}
} // namespace
