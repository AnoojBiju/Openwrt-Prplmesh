
/* SPDX-License-Identifier: BSD-2-Clause-Patent
 *
 * SPDX-FileCopyrightText: 2020 the prplMesh contributors (see AUTHORS.md)
 *
 * This code is subject to the terms of the BSD+Patent license.
 * See LICENSE file for more details.
 */

%config {
    define-behavior = {
        existing-object = "update"
    };
}

%define {
    select Device.WiFi.DataElements.Network.Device {
        /*
        ** A unique identifier for this particular device
        ** within the Wi-Fi network
        */
        %read-only string ID = "00:00:00:00:00:00";

        /*
        ** The Multi-AP capabilities supported by this device
        */
        object MultiAPCapabilities {

            /* Support Unassociated STA Link Metrics reporting
            ** on the channels its BSSs are currently operating on.
            */
            %read-only bool UnassociatedSTALinkMetricsCurrentlyOn = false;

            /* Support Unassociated STA Link Metrics reporting on channels
            ** its BSSs are not currently operating on.
            */
            %read-only bool UnassociatedSTALinkMetricsCurrentlyOff = false;

            /* Support Agent-initiated RCPI-based Steering */
            %read-only bool AgentInitiatedRCPIBasedSteering = false;
        }

        %read-only object MultiAPDevice {

            /* Represented as a six hexadecimal-digit value using all upper-case letters [0-9A-F] {6} */
            %read-only string ManufacturerOUI;
            %read-only string LastContactTime = "2020-08-31T11:22:39Z";
            %read-only string AssocIEEE1905DeviceRef;
        }

        %read-only object MultiAPBackhaul {

            %read-only string BackhaulLinkType {
                default "None";
                on action validate call check_enum [
                    "None",
                    "Wi-Fi",
                    "MoCA",
                    "Ethernet",
                    "G.hn",
                    "HPNA",
                    "HomePlug",
                    "UPA"
                ];
            }

            /**
             * An empty string value is reserved for the APDevice instance
             * that represents the Multi-AP Controller.
             */
            %read-only string BackhaulMACAddress = "";
            %read-only string BackhaulDeviceID = "";
            %read-only string MACAddress = "";
        }

        /*
        ** The list of Radio objects.
        */
        object Radio [] {
            counted with NumberOfRadios;
        }

        /*
        ** The list of Interface objects.
        */
        object Interface [] {
            %read-only string Status {
                default "Down";
                on action validate call check_enum [
                    "Up",
                    "Down",
                    "Dormant"
                ];
            }
            %read-only string MACAddress = "00:00:00:00:00:00";
            %read-only string Name = "NoName";
            %read-only uint16 MediaType = 0;

            object Stats {
                %read-only uint64 BytesSent  = 0;
                %read-only uint64 BytesReceived  = 0;
                %read-only uint64 PacketsSent  = 0;
                %read-only uint64 PacketsReceived  = 0;
                %read-only uint32 ErrorsSent  = 0;
                %read-only uint32 ErrorsReceived  = 0;
                %read-only uint64 UnicastPacketsSent = 0;
                %read-only uint64 UnicastPacketsReceived = 0;
                %read-only uint32 DiscardPacketsSent = 0;
                %read-only uint32 DiscardPacketsReceived = 0;
                %read-only uint64 MulticastPacketsSent = 0;
                %read-only uint64 MulticastPacketsReceived = 0;
                %read-only uint64 BroadcastPacketsSent = 0;
                %read-only uint64 BroadcastPacketsReceived = 0;
            }

            object Neighbor [] {

                /*
                ** Neighbor AL-MAC address.
                */
                %read-only string ID = "00:00:00:00:00:00";
                %read-only bool IsIEEE1905 = false;
                counted with NumberOfNeighbors;
            }

            counted with NumberOfInterfaces;
        }

        /*
        ** The interval between the collection of consecutive measurements of the most
        ** frequently updated Data Element from this device (milliseconds).
        */
        %read-only uint32 CollectionInterval = 0 {
            on action validate call check_minimum 0;
        }
    }
}
