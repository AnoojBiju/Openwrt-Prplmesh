variables:
  PYTHONUNBUFFERED: "1"
  ARTIFACT_DOWNLOAD_ATTEMPTS: 3
  GET_SOURCES_ATTEMPTS: 3

default:
  interruptible: true

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"'
    # Cfr. Workflows/MergeRequest-Pipelines.gitlab-ci.yml template
    - if: $CI_MERGE_REQUEST_IID
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - containers
  - build
  - platform
  - test
  - certification-dummy
  - upload

include:
  - local: "/ci/templates.yml"

.rules-for-expensive-job: &expensive-job
  - if: '$CI_PIPELINE_SOURCE == "schedule"'
  - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"'
  - if: $CI_COMMIT_TAG
  - when: manual
    allow_failure: true

image-build-builder/alpine:
  extends: .image-build

image-build-builder/ubuntu/bionic:
  extends: .image-build

image-build-tests-runner:
  extends: .image-build

image-build-boardfarm-ci:
  extends: .image-build

image-build-cppcheck:
  extends: .image-build

platform:
  stage: platform
  needs:
    - build-in-docker
    - image-build-boardfarm-ci
  rules: *expensive-job
  variables:
    ALTRAN_TESTS: $ALTRAN_TESTS
    TESTS_TO_RUN_ESSENSIUM: $TESTS_TO_RUN_ESSENSIUM
    DEVICE_UNDER_TEST_ESSENSIUM: $DEVICE_UNDER_TEST_ESSENSIUM
    TESTS_TO_RUN_ISR: $TESTS_TO_RUN_ISR
    DEVICE_UNDER_TEST_ISR: $DEVICE_UNDER_TEST_ISR
    TESTS_TO_RUN_R2_ESSENSIUM: $TESTS_TO_RUN_R2_ESSENSIUM
    DEVICE_UNDER_TEST_R2_ESSENSIUM: $DEVICE_UNDER_TEST_R2_ESSENSIUM
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
    CI_PARENT_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE
  trigger:
    include: "ci/platform.yml"
    strategy: depend

dco:
  stage: build
  variables:
    CI_COMMIT_BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
  needs: []
  image: christophebedard/dco-check:latest
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_EXTERNAL_PULL_REQUEST_IID
  script:
    - export CI_MERGE_REQUEST_TARGET_BRANCH_SHA=$(git merge-base --fork-point origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME)
    # if --forkpoint failed, fallback to just using merge-base:
    - test -z "$CI_MERGE_REQUEST_TARGET_BRANCH_SHA" && export CI_MERGE_REQUEST_TARGET_BRANCH_SHA=$(git merge-base "origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME" "origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME")
    - dco-check --verbose

cppcheck:
  stage: build
  image: $CI_REGISTRY_IMAGE/prplmesh-cppcheck:$CI_PIPELINE_ID
  script:
    # cppcheck runs in its own image because every new release brings
    # useful improvements (the versions from regular distros get old
    # too quickly) and to be able to update builders without having to
    # solve newly reported cppcheck issues at the same time.
    - tools/docker/static-analysis/cppcheck.sh .
  artifacts:
    paths:
      - cppcheck_results.txt
    when: always
  tags:
    - docker
  needs: ["image-build-cppcheck"]

cppcheck-diff:
  stage: build
  image: $CI_REGISTRY_IMAGE/prplmesh-cppcheck:$CI_PIPELINE_ID
  script:
    - ci/cppcheck/cppcheck-new-issues.sh
  artifacts:
    paths:
      - cppcheck_results.txt
      - cppcheck_existing_issues.txt
    expire_in: 4 weeks
    when: always
  tags:
    - docker
  needs: ["image-build-cppcheck"]

flake8:
  stage: build
  image: pipelinecomponents/flake8:f087c4c
  script:
    - apk add --update --no-cache git
    - git ls-files -z -- '*.py' ':(exclude)tools/maptools.py' ':(exclude)framework/tlvf/tlvf.py' |
      xargs -0 -t flake8 --verbose
  needs: []

shellcheck:
  stage: build
  image: koalaman/shellcheck-alpine:v0.7.1
  before_script:
    - apk add --update --no-cache git
  script:
    - git ls-files -z '*.sh' '*.sh.in'  | xargs -0 shellcheck -x -P tools:ci/owncloud
  needs: []

clang-format:
  extends: .in-prplmesh-builder
  stage: build
  script:
    # Run clang-format and check there are no modified files
    - ./clang-format.sh
    # `diff-index` doesn't update the index so doesn't actually see changes. Need to manually update index.
    - git update-index -q --refresh
    # Use `diff-index` instead of `status` or `diff` because it gives more predictable output and exit code.
    - |
      git diff-index --exit-code HEAD || {
        ret=$?
        echo "Inconsistent formatting, please apply patch from artifacts"
        git diff > correct-formatting.patch
        exit $ret
      }
  artifacts:
    paths:
      - correct-formatting.patch
    when: on_failure

.build-in-docker:
  extends: .in-prplmesh-builder
  stage: build
  variables:
    CMAKE_BUILD_TYPE: "Release"
    EXTRA_CMAKE_FLAGS: ""
  script:
    # To be sure that AutoGenerated is correct, remove it first and check later that it's unchanged.
    - rm -rf framework/tlvf/AutoGenerated common/beerocks/tlvf/AutoGenerated
    - cmake -DBUILD_TESTS=ON $EXTRA_CMAKE_FLAGS -DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE \
      -DCMAKE_INSTALL_PREFIX=build/install -H. -Bbuild -G Ninja
    - ninja -C build install
    # Check that the AutoGenerated files are correct by checking git status
    - git update-index -q --refresh
    - git diff-index --exit-code HEAD
  artifacts:
    paths:
      - build/install

pytest:
  extends: .build-in-docker
  script:
    - cd tools
    - pytest-3

build-in-docker:
  extends: .build-in-docker
  variables:
    EXTRA_CMAKE_FLAGS: "-DENABLE_NBAPI=ON"

build-in-docker-alpine:
  extends: .build-in-docker
  image: $CI_REGISTRY_IMAGE/prplmesh-builder-alpine:$CI_PIPELINE_ID
  rules: *expensive-job
  needs: ["image-build-builder/alpine"]

build-in-docker-static:
  extends: build-in-docker
  variables:
    EXTRA_CMAKE_FLAGS: "-DBUILD_SHARED_LIBS=OFF"
  rules: *expensive-job

tlvf_test:
  extends: .run-test-in-docker

bwl_dummy_unit_tests:
  extends: .run-test-in-docker

bcl_unit_tests:
  extends: .run-test-in-docker

mapf_common_encryption_tests:
  extends: .run-test-in-docker

ieee1905_transport_broker_tests:
  extends: .run-test-in-docker

beerocks_agent_unit_tests:
  extends: .run-test-in-docker

nbapi_unit_tests:
  extends: .run-test-in-docker

db_unit_tests:
  extends: .run-test-in-docker

boardfarm-tests:
  stage: test
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - ./dctest.py
  artifacts:
    paths:
      - logs
    when: always
  needs:
    - job: build-in-docker
    - job: image-build-boardfarm-ci
  tags:
    - boardfarm-compose
  timeout: 30m

boardfarm-stability-tests:
  extends: boardfarm-tests
  parallel: 10
  rules:
    - if: '$STABILITY_TESTS'

run-certification-tests-R1-prplmesh-essensium:
  extends: .run-certification-tests-R1
  before_script:
    - !reference [.run-certification-tests-R1, before_script]
    - echo "$TESTS_TO_RUN_ESSENSIUM" > .tests-to-run
    - echo "$DEVICE_UNDER_TEST_ESSENSIUM" > .device-under-test
  tags:
    - certs-tests-essensium
  needs:
    - job: build-in-docker
  rules:
    - if: '$TESTS_TO_RUN_ESSENSIUM !~ /^\$/ && $DEVICE_UNDER_TEST_ESSENSIUM == "prplmesh"'

run-certification-tests-R1-prplmesh-isr:
  extends: .run-certification-tests-R1
  before_script:
    - !reference [.run-certification-tests-R1, before_script]
    - echo "$TESTS_TO_RUN_ISR" > .tests-to-run
    - echo "$DEVICE_UNDER_TEST_ISR" > .device-under-test
  tags:
    - certs-tests-isr
  needs:
    - job: build-in-docker
  rules:
    - if: '$TESTS_TO_RUN_ISR !~ /^\$/ && $DEVICE_UNDER_TEST_ISR == "prplmesh"'

upload-artifacts:
  stage: upload
  extends: .in-prplmesh-builder
  script:
    # the owncloud password is stored in the file pointed by "$CI_OWNCLOUD_PASSWORD".
    # We can only store the password in it, since spaces are not supported in Gitlab masked variables.
    # We symlink the file to .netrc and pre-pend to it to avoid manipulating the password itself
    # on the command line.
    - ln -s "$CI_OWNCLOUD_PASSWORD" ~/.netrc
    - sed --follow-symlinks -i 's/^/machine ftp.essensium.com login prplmesh-robot-ci password /' ~/.netrc
    - |
      echo "Updating the 'latest' folder"
      # Copying takes a lot of time, and we want the "latest" folder
      # to be updated "as fast as possible", so we rely on the script
      # to upload to a temporary directory first, and move it to
      # "latest" afterwards:
      ci/owncloud/upload_to_owncloud.sh -v "artifacts/latest" ./build
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
  needs:
    - build-in-docker
    - platform
    - job: build-for-intel-mips
      project: $CI_PROJECT_PATH
      ref: $CI_COMMIT_REF_NAME
      artifacts: true
    - job: build-for-turris-omnia
      project: $CI_PROJECT_PATH
      ref: $CI_COMMIT_REF_NAME
      artifacts: true
    - job: build-for-rdkb-turris-omnia
      project: $CI_PROJECT_PATH
      ref: $CI_COMMIT_REF_NAME
      artifacts: true
    - job: build-for-glinet-b1300
      project: $CI_PROJECT_PATH
      ref: $CI_COMMIT_REF_NAME
      artifacts: true
